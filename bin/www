#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('positionsystem:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



var dgram = require('dgram');

var clientSocket = dgram.createSocket('udp4');
var query= require('../lib/db/mysql');


clientSocket.on('message', function(msg, rinfo){
  var revice=Buffer.from(msg);
  var messages=revice.toString();
  var reg=/(\d+\.\d+)+/gi;
  var matches=reg.exec(messages);
  var lat=matches[0];
  matches=reg.exec(messages);
  var lng=matches[0];
  // console.log(messages);
  // console.log(lat+','+lng);
  
    var lats=parseInt(lat/100)+(lat%parseFloat(100))/parseFloat(60);
    var lngs=parseInt(lng/100)+(lng%parseFloat(100))/parseFloat(60);
    var coordinate=lngs+','+lats;
    // console.log(lats);
    
    query('update gpsobj set lastValue="'+coordinate+'" where id=1',function(err,vals,fileds){
      if (err==null) {
        
      }else{
        console.log(err);
      }
    });
});

clientSocket.on('error', function(err){
  console.log('error, msg - %s, stack - %s\n', err.message, err.stack);
});

clientSocket.bind(9999);
